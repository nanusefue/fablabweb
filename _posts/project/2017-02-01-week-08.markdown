---
layout: project
title:  "Mar 15: embedded programming [8]"
date:   2017-01-30 12:00:00
author: Marcel Newman
categories:
- project
img: portfolio_08.jpg
thumb: thumb02.jpg
carousel:
#- single01.jpg
#- single02.jpg
#- single03.jpg
tagged: Flat, UI, Development
client: Wonder Corp.
website: http://blacktie.co
---


<h2>Assignment</h2>

<ul>
<li>
  <h3>Read a microcontroller data sheet.
</h3>
</li>
<li>
  <h3>Program your board to do something, with as many different programming languages and programming environments as possible.
</h3>
</li>
<li>
  <h3>Optionally, experiment with other architectures.</h3>
</li> 
</ul>





<p>
For this assignment began studying the Attiny family of Atmel processors. <a href="http://www.atmel.com/products/microcontrollers/avr/tinyavr.aspx" target="_blank" >Attiny
</a></p>
<p>When we work with any electronic component, and more when it is a chip, all of them have their datasheet, these sheets give us the necessary information to be able to use them in any design we make, such as work voltages, currents, programming, arrangement of pins, size, etc.</p>

<div class="col-xs-12 ">
<img width="450px" src="{{ "/assets/img/project/week8/atmel.png" | prepend: site.baseurl }}" alt='webpage jekyll'>
<img width="450px" src="{{ "/assets/img/project/week8/atmel1.png" | prepend: site.baseurl }}" alt='webpage jekyll'>
</div>

<div class="col-xs-12 ">
<img width="450px" src="{{ "/assets/img/project/week8/atmel2.png" | prepend: site.baseurl }}" alt='webpage jekyll'>
<img width="450px" src="{{ "/assets/img/project/week8/atmel3.png" | prepend: site.baseurl }}" alt='webpage jekyll'>
</div>


<div class="col-xs-12 col-xs-offset-2 col-lg-10 col-lg-offset-2 ">
  <img width="650px" src="{{ "/assets/img/project/week8/atmel6.png" | prepend: site.baseurl }}" alt='webpage jekyll'>
</div>

<p>For this week I decided to investigate to be able to make my board have a bootloader as an arduino and be able to use the Arduino IDE.</p>
<p>For this I will use a bootloader that I have modified and can be used with the attiny44, also it is necessary to know how the pins of the atiny are mapped with the pins of Arduino, here we see a picture of how this would be.</p>

<p>This allows me to upload all the code through the USB port without having to have 6 extra pins and the FABISP.</p>

<div class="col-xs-12 col-xs-offset-2 col-lg-10 col-lg-offset-2 ">
<img width="650px" src="{{ "/assets/img/project/week8/atmel5.png" | prepend: site.baseurl }}" alt='webpage jekyll'>
</div>

<p>The first program is a blink, to prove that everything works correctly.</p>

<div class="col-xs-12 ">


{% highlight c++ linenos %}

	/*   Blink */
	// the setup function runs once when you press reset or power the board
	void setup() {
	  // initialize digital pin LED_BUILTIN as an output.
	  pinMode(10, OUTPUT);
	}

	// the loop function runs over and over again forever
	void loop() {
	  digitalWrite(10, HIGH);   // turn the LED on (HIGH is the voltage level)
	  delay(1000);                       // wait for a second
	  digitalWrite(10, LOW);    // turn the LED off by making the voltage LOW
	  delay(1000);                       // wait for a second
	}
{% endhighlight %}
</div>
<br>

<div class="col-xs-12 ">

<video width="800" controls loop>
  <source src="{{ "/assets/img/project/week8/video.mp4" | prepend: site.baseurl }}" type="video/mp4">
  Your browser does not support HTML5 video.
</video>
</div>
<br>
<p>The second program used the library to control servo motor, basically with this board we can use almost all libraries of arduino, the only problem is the space that is available to our programs, as the 44 attiny is only 4k.</p>
<div class="col-xs-12 ">

{% highlight c++ linenos %}

#include <SoftRcPulseOut.h> 
 
SoftRcPulseOut myservo;  // create servo object to control a servo 
                        // a maximum of eight servo objects can be created 
#define SERVO_PIN         9

#define REFRESH_PERIOD_MS 1

#define NOW               1

int pos = 0;    // variable to store the servo position 
 
void setup() 
{ 
  myservo.attach(SERVO_PIN);  // attaches the servo on pin defined by SERVO_PIN to the servo object 
} 
 
 
void loop() 
{ 
  for(pos = 0; pos < 180; pos += 1)  // goes from 0 degrees to 180 degrees 
  {                                  // in steps of 1 degree 
    myservo.write(pos);              // tell servo to go to position in variable 'pos' 
    delay(REFRESH_PERIOD_MS);        // waits 20ms for refresh period 
    SoftRcPulseOut::refresh(NOW);    // generates the servo pulse Now
  } 
  for(pos = 180; pos>=1; pos-=1)     // goes from 180 degrees to 0 degrees 
  {                                
    myservo.write(pos);              // tell servo to go to position in variable 'pos' 
    delay(REFRESH_PERIOD_MS);        // waits 20ms for for refresh period 
    SoftRcPulseOut::refresh(NOW);    // generates the servo pulse Now
  } 
} 
{% endhighlight %}
</div>

<div class="col-xs-12 ">

<video width="800" controls loop>
  <source src="{{ "/assets/img/project/week8/servo.mp4" | prepend: site.baseurl }}" type="video/mp4">
  Your browser does not support HTML5 video.
</video>
</div>

<h3>Referens</h3>

<p><a href="http://academy.cba.mit.edu/classes/embedded_programming/doc8183.pdf">Attiny 44/84</a></p>
<p><a href="https://github.com/nanusefue/micronucleus">Micronucleus</a></p>
<p><a href="https://learn.adafruit.com/add-boards-arduino-v164/overview">Adding third party boards Arduino IDE</a></p>


<!--<h3>Download</h3>-->


