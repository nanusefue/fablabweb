---
layout: project
title:  "Electronics production [4]"
date:   2017-01-28 12:00:00
author: Esteban Martin Gimenez
categories:
- project
img: portfolio_04.jpg
thumb: thumb02.jpg
carousel:
#- single01.jpg
#- single02.jpg
#- single03.jpg
tagged: Flat, UI, Development
client: Wonder Corp.
website: http://blacktie.co
---

<h2>Assignment</h2>
<ul>
<li>
	<h3>Make an in-circuit programmer by milling the PCB</h3>
</li>	
<li>
	<h3>Optionally trying other processes.</h3>
</li>
</ul>


<h2>Make an in-circuit programmer by milling the PCB</h2>

<p>
This week work to make an own FABISP, this board is very useful.
When creating any new board with any microcontroller  (avr family), normally you need load some program inside, the fabisp is a board to make this be a possibility.
Only you need to connect the fabsip in your computer and run the specific command to program the new board. 
</p>
<p>From the different design of the FABISP, I have decided to make several formats, the version with a mini usb connector and the version with the usb connector on the board, which uses fewer components. from the two png file cutting and paths, I used the fabmodules version to create the file for the cnc that we use in the fablab.</p>

<div class="col-xs-12 ">
<img width="300px" src="{{ "/assets/img/project/week4/hello.ISP.44.interior.png" | prepend: site.baseurl }}" alt='webpage jekyll'>
<img width="300px" src="{{ "/assets/img/project/week4/hello.ISP.44.traces.png" | prepend: site.baseurl }}" alt='webpage jekyll'>
<img width="300px" src="{{ "/assets/img/project/week4/hello.ISP.44.png" | prepend: site.baseurl }}" alt='webpage jekyll'>
</div>

<p>
configuration of fabmodules, we must create two files for this plate, one that corresponds to the external cut and another one for the creation of the traces of our board.
Import:
for both files we select the type of file that we are going to import (png), that must have a minimum resolution of 600dpi
Output format:
Roland mill (.rml) that is the format that accepts our cnc<p>
<ul>
<li>Traces:</li>
<ul>
<li><strong>PCB traces (1/64)</strong></li>
<li>PCB outline (1/32)</li>
<li>PCB traces (0.010)</li>
<li>wax rough cut (1/8)</li>
<li>wax finish cut (1/8)</li>
</ul>
</ul>

 
<ul>
<li>Outline:</li>
<ul>
<li>PCB traces (1/64)</li>
<li><strong>PCB outline (1/32)</strong></li>
<li>PCB traces (0.010)</li>
<li>wax rough cut (1/8)</li>
<li>wax finish cut (1/8)</li>
</ul>
</ul>
<h4>Cuts configurations
</h4>

<ul>
<li><strong>Outline:</strong></li>
<ul>
<li>machine: SMR-20</li>   
<li>x0 (mm): 0</li>
<li>y0 (mm): 0</li>
<li>z0 (mm): 0</li>
<li>xhome (mm): 0</li>
<li>yhome (mm): 0</li>
<li>zhome (mm): 10</li>	
</ul>
</ul>

<ul>
<li><strong>Process: (THIS CHANGES DEPEND IS IF TRACE OR OUTLINE)</strong></li>
<ul>
<li>cut depth (mm): 0.6</li>
<li>stock thickness (mm): 1.7</li>
<li>tool diameter (mm): 0.79</li> 
<li>number of offsets (-1 to fill): 1</li> 	
</ul>

</ul>

<div class="col-xs-12">

<img width="900px" src="{{ "/assets/img/project/week4/programerusb1.png" | prepend: site.baseurl }}" alt='webpage jekyll'>
</div>

<div class="col-xs-12">

<img width="900px" src="{{ "/assets/img/project/week4/programerusb3.png" | prepend: site.baseurl }}" alt='webpage jekyll'>
</div>


<p>Save .rml file</p>

<h4>Cutting in SMR-20 vPanel</h4>

<p>Before sending to cut our table is necessary to fix it in the platform of the machine, for this is used double-sided tape, since it is perfectly adapted to the platform and allows us to remove it without any difficulty when finished cutting the plate.</p>

<p>This is the control panel that we will use to configure the machine and send the files to our boards.</p>

<div class="col-xs-12 col-xs-offset-2 col-lg-10 col-lg-offset-2 ">
<img width="600px" src="{{ "/assets/img/project/week4/srm20-1.png" | prepend: site.baseurl }}" alt='webpage jekyll'>
</div>


<div class="col-xs-12  ">
<img width="900px" src="{{ "/assets/img/project/week4/srm20-3.png" | prepend: site.baseurl }}" alt='webpage jekyll'>
</div>
<div class="col-xs-12  ">
<img width="900px" src="{{ "/assets/img/project/week4/srm20-4.png" | prepend: site.baseurl }}" alt='webpage jekyll'>
</div>

<h4>Configure file in SMR-20 vPanel (CUT)</h4>

<div class="col-xs-12  ">
<img width="900px" src="{{ "/assets/img/project/week4/srm20-5.png" | prepend: site.baseurl }}" alt='webpage jekyll'>
</div>
<div class="col-xs-12  ">
<img width="900px" src="{{ "/assets/img/project/week4/srm20-6.png" | prepend: site.baseurl }}" alt='webpage jekyll'>
</div>

<h4>Set the Origin Point (XYZ)</h4>

<p>The X and Y origins are determined by the cutting data and the location of
the material. (“X” and “Y” cannot be set individually.) You normally align
the Z origin with the surface of the material. Take the size of the material
and the length of the cutting tool into consideration when you set the
origins.</p>

<div class="col-xs-12">

<img width="450px" src="{{ "/assets/img/project/week4/srm-xy.png" | prepend: site.baseurl }}" alt='webpage jekyll'>
<img width="400px" src="{{ "/assets/img/project/week4/srm_xy.png" | prepend: site.baseurl }}" alt='webpage jekyll'>
</div>


<div class="col-xs-12  ">
<img width="900px" src="{{ "/assets/img/project/week4/srm20-10.png" | prepend: site.baseurl }}" alt='webpage jekyll'>
</div>
<div class="col-xs-12  ">
<img width="900px" src="{{ "/assets/img/project/week4/srm20-11.png" | prepend: site.baseurl }}" alt='webpage jekyll'>
</div>

<div class="col-xs-12  ">
<img width="400px" src="{{ "/assets/img/project/week4/srm_yes.png" | prepend: site.baseurl }}" alt='webpage jekyll'>
<img width="400px" src="{{ "/assets/img/project/week4/srm_000.png" | prepend: site.baseurl }}" alt='webpage jekyll'>

</div>

<h4>Final Process</h4>

<div class="col-xs-12 ">

<img width="400px" src="{{ "/assets/img/project/week4/programer1.jpg" | prepend: site.baseurl }}" alt='webpage jekyll'>
<img width="400px" src="{{ "/assets/img/project/week4/programer.jpg" | prepend: site.baseurl }}" alt='webpage jekyll'>
</div>

<h4>UBS connector in pcb details</h4>

<div class="col-xs-12">

<img width="400px" src="{{ "/assets/img/project/week4/programer4.jpg" | prepend: site.baseurl }}" alt='webpage jekyll'>
<img width="400px" src="{{ "/assets/img/project/week4/programer3.jpg" | prepend: site.baseurl }}" alt='webpage jekyll'>
</div>
<h4>Programing board connections</h4>
<p>I work on linux and normally work with the design of boards, so I have already installed all the tools to work with microprocessors of the AVR family </ p>
<p> But for anyone who wants to program their microcontrollore in linux you need to install some packages </p>
{% highlight bash linenos%}

sudo apt-get install gcc-avr binutils-avr avr-libc

sudo apt-get install avrdude
{% endhighlight %}

<br>

<div class="col-xs-12">

<img width="400px" src="{{ "/assets/img/project/week4/programer5.jpg" | prepend: site.baseurl }}" alt='webpage jekyll'>
<img width="400px" src="{{ "/assets/img/project/week4/programer6.jpg" | prepend: site.baseurl }}" alt='webpage jekyll'>
</div>

<h4>AVR Fuse</h4>
<p>
The fuse is a very important part when programming our microcontroller, an error in the fuse can leave to break of the own chip,
the fuses define how our chip should act, whether it has an external oscillator, the speed of the clock, whether it contains a bootloader, voltages and what it will work, protection to protect the program, etc.
The important thing about fuses is that they can be reset and changed constantly.
</p>
<p>
Each type of process has different fuse settings.
</p>


{% highlight bash linenos%}

nanu@nanu-ThinkPad-X220:firmware$ make fuse
avrdude -c usbtiny -p attiny44  -U hfuse:w:0xDF:m -U lfuse:w:0xFF:m

avrdude: AVR device initialized and ready to accept instructions

Reading | ################################################## | 100% 0.01s

avrdude: Device signature = 0x1e9207
avrdude: reading input file "0xDF"
avrdude: writing hfuse (1 bytes):

Writing | ################################################## | 100% 0.00s

avrdude: 1 bytes of hfuse written
avrdude: verifying hfuse memory against 0xDF:
avrdude: load data hfuse data from input file 0xDF:
avrdude: input file 0xDF contains 1 bytes
avrdude: reading on-chip hfuse data:

Reading | ################################################## | 100% 0.00s

avrdude: verifying ...
avrdude: 1 bytes of hfuse verified
avrdude: reading input file "0xFF"
avrdude: writing lfuse (1 bytes):

Writing | ################################################## | 100% 0.01s

avrdude: 1 bytes of lfuse written
avrdude: verifying lfuse memory against 0xFF:
avrdude: load data lfuse data from input file 0xFF:
avrdude: input file 0xFF contains 1 bytes
avrdude: reading on-chip lfuse data:

Reading | ################################################## | 100% 0.00s

avrdude: verifying ...
avrdude: 1 bytes of low fuse verified

avrdude: safemode: Fuses OK

avrdude done.  Thank you.

{% endhighlight %}

<h4>Programing</h4>

<p>
To program the chip with the firmware the "make" command is used, this command allows us to create different configurations depending on what we want to do to our chip.
like for example to record the fuse, to compile/recompile the code, etc. thus configuring this file we can indicate the family of the chip and the programmer to be used.
the -c flag is used to indicate the programmer and the -p family to which the chip belongs.

</p>

{% highlight bash linenos%}

nanu@nanu-ThinkPad-X220:firmware$ make program
avrdude -c usbtiny -p attiny44  -U flash:w:main.hex:i

avrdude: AVR device initialized and ready to accept instructions

Reading | ################################################## | 100% 0.01s

avrdude: Device signature = 0x1e9207
avrdude: NOTE: FLASH memory has been specified, an erase cycle will be performed
         To disable this feature, specify the -D option.
avrdude: erasing chip
avrdude: reading input file "main.hex"
avrdude: writing flash (2020 bytes):

Writing | ################################################## | 100% 5.68s



avrdude: 2020 bytes of flash written
avrdude: verifying flash memory against main.hex:
avrdude: load data flash data from input file main.hex:
avrdude: input file main.hex contains 2020 bytes
avrdude: reading on-chip flash data:

Reading | ################################################## | 100% 3.36s



avrdude: verifying ...
avrdude: 2020 bytes of flash verified

avrdude: safemode: Fuses OK

avrdude done.  Thank you.

avrdude -c usbtiny -p attiny44  -U hfuse:w:0xDF:m -U lfuse:w:0xFF:m

avrdude: AVR device initialized and ready to accept instructions

Reading | ################################################## | 100% 0.01s

avrdude: Device signature = 0x1e9207
avrdude: reading input file "0xDF"
avrdude: writing hfuse (1 bytes):

Writing | ################################################## | 100% 0.00s

avrdude: 1 bytes of hfuse written
avrdude: verifying hfuse memory against 0xDF:
avrdude: load data hfuse data from input file 0xDF:
avrdude: input file 0xDF contains 1 bytes
avrdude: reading on-chip hfuse data:

Reading | ################################################## | 100% 0.00s

avrdude: verifying ...
avrdude: 1 bytes of hfuse verified
avrdude: reading input file "0xFF"
avrdude: writing lfuse (1 bytes):

Writing | ################################################## | 100% 0.00s

avrdude: 1 bytes of lfuse written
avrdude: verifying lfuse memory against 0xFF:
avrdude: load data lfuse data from input file 0xFF:
avrdude: input file 0xFF contains 1 bytes
avrdude: reading on-chip lfuse data:

Reading | ################################################## | 100% 0.00s

avrdude: verifying ...
avrdude: 1 bytes of lfuse verified

avrdude: safemode: Fuses OK

avrdude done.  Thank you.
{% endhighlight %}


<br>
<p>

To verify that our board works correctly simply connecting it to our computer and using the command linux:

{% highlight bash linenos%}
nanu@nanu-ThinkPad-X220:firmware$ lsusb
{% endhighlight %}

we will see that our device will appear in the list, and we can start to record any microprocessor that uses the ISP protocol.
</p>
<div class="col-xs-12 ">

<img width="1200px" src="{{ "/assets/img/project/week4/programerusb.png" | prepend: site.baseurl }}" alt='webpage jekyll'>
</div>
<h3>References</h3>

<p><a target="_blank" href="http://www.ladyada.net/learn/avr/fuses.html">AVR Fuse</a></p>
<p><a target="_blank" href="https://en.wikipedia.org/wiki/In-system_programming">ISP</a></p>
<p><a target="_blank" href="http://fabmodules.org/">Fabmodules</a></p>
<p><a target="_blank" href="http://www.nongnu.org/avrdude/">Avrdude</a></p>

<h3>Download</h3>
<p><a href="{{ "/assets/img/project/week4/download/fabisp.zip" | prepend: site.baseurl }}">FabISP</a></p>
<p><a href="{{ "/assets/img/project/week4/download/fabispmin45.zip" | prepend: site.baseurl }}">FabISP MINI </a></p>

<p><a target="_blank" href="{{ "/assets/img/project/week4/srm-20.pdf" | prepend: site.baseurl }}"> SRM-20 Manual</a></p>


